package randomtestgenerator.UI;


import threads.ThreadForReadWordFile;
import java.awt.Color;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import randomgenerator.random.MyRandom;
import randomtestgenerator.base.DefaultValues;
import randomtestgenerator.base.OutputPrinter;
import randomtestgenerator.base.WriteFromOdtFiles;
import randomtestgenerator.base.WriteReadFromSer;
import randomtestgenerator.base.WriteReadFromWordFile;

public class UserUI extends javax.swing.JFrame implements TableModelListener {
    private final static String Q_DIR = "questions";
    private final static String FAIL = " fail ";
    
    private List<String> hashKeys;
    private HashMap<String,List<String>> tests;
    private DefaultValues defVal;
    
    private int allNumbersOfQuestions;
    
    /**
     * Creates new form UserUI
     */
    public UserUI() {
        initComponents();
        updateFiels();        
        this.setResizable(false);
        vTableForCategories.getModel().addTableModelListener(this);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vqLableNameDev = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        qTotalQuestions = new javax.swing.JLabel();
        qYouHave = new javax.swing.JLabel();
        vMoreQuestions = new javax.swing.JLabel();
        qMoreQuestions = new javax.swing.JLabel();
        vGoButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        vTableForCategories = new javax.swing.JTable();
        vNumAllTextField = new javax.swing.JTextField();
        vNoRadioButton = new javax.swing.JRadioButton();
        vYesRadioButton = new javax.swing.JRadioButton();
        q = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        vDocTextArea = new javax.swing.JTextArea();
        vSaveDocButton = new javax.swing.JButton();
        vPrintButton = new javax.swing.JButton();
        vSaveOdtButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(972, 500));
        setMinimumSize(new java.awt.Dimension(972, 500));

        vqLableNameDev.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        vqLableNameDev.setText("g.c.ivanov@gmail.com");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(450, 473));

        qTotalQuestions.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qTotalQuestions.setText("Total questions ");

        qYouHave.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        qYouHave.setText("You have");

        vMoreQuestions.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        vMoreQuestions.setText("11");

        qMoreQuestions.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        qMoreQuestions.setText("more questions to add");

        vGoButton.setText("Goo");
        vGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vGoButtonActionPerformed(evt);
            }
        });

        vTableForCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category", "all:", "num:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vTableForCategories.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(vTableForCategories);
        if (vTableForCategories.getColumnModel().getColumnCount() > 0) {
            vTableForCategories.getColumnModel().getColumn(0).setResizable(false);
            vTableForCategories.getColumnModel().getColumn(0).setPreferredWidth(250);
            vTableForCategories.getColumnModel().getColumn(1).setResizable(false);
            vTableForCategories.getColumnModel().getColumn(1).setPreferredWidth(50);
            vTableForCategories.getColumnModel().getColumn(2).setResizable(false);
            vTableForCategories.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        vNumAllTextField.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        vNumAllTextField.setText("000");
        vNumAllTextField.setMaximumSize(new java.awt.Dimension(6, 29));
        vNumAllTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                vNumAllTextFieldKeyReleased(evt);
            }
        });

        vNoRadioButton.setText("NO");
        vNoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vNoRadioButtonActionPerformed(evt);
            }
        });

        vYesRadioButton.setText("YES");
        vYesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vYesRadioButtonActionPerformed(evt);
            }
        });

        q.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        q.setText("Random choice from categories :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(vNoRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vYesRadioButton))
                    .addComponent(q))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(qTotalQuestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vNumAllTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(qMoreQuestions)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(vGoButton))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(vMoreQuestions))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(qYouHave)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qTotalQuestions)
                    .addComponent(vNumAllTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(qYouHave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vMoreQuestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qMoreQuestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                        .addComponent(vGoButton)
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(q)
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vYesRadioButton)
                            .addComponent(vNoRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 0));

        vDocTextArea.setColumns(20);
        vDocTextArea.setRows(5);
        jScrollPane3.setViewportView(vDocTextArea);

        vSaveDocButton.setText("save as .docx");
        vSaveDocButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vSaveDocButtonActionPerformed(evt);
            }
        });

        vPrintButton.setText("print");
        vPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vPrintButtonActionPerformed(evt);
            }
        });

        vSaveOdtButton.setText("save as .odt");
        vSaveOdtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vSaveOdtButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(vSaveDocButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vSaveOdtButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                        .addComponent(vPrintButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vPrintButton)
                    .addComponent(vSaveDocButton)
                    .addComponent(vSaveOdtButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vqLableNameDev, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(vqLableNameDev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vYesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vYesRadioButtonActionPerformed
        if(vNoRadioButton.isSelected()) {
            vNoRadioButton.setSelected(false);
        }
        if(vTableForCategories.isVisible()) {
            vTableForCategories.setVisible(false);
            vMoreQuestions.setText(""+0);
            vMoreQuestions.setForeground(Color.black);
        }
    }//GEN-LAST:event_vYesRadioButtonActionPerformed

    private void vNoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vNoRadioButtonActionPerformed
        // TODO add your handling code here:
        if(vYesRadioButton.isSelected()) {
            vYesRadioButton.setSelected(false);
        }
        if(!vTableForCategories.isVisible()) {
            vTableForCategories.setVisible(true);
            changeMoreQuestions();
        }
    }//GEN-LAST:event_vNoRadioButtonActionPerformed
    
    private void vNumAllTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vNumAllTextFieldKeyReleased
        checkAllNum();
    }//GEN-LAST:event_vNumAllTextFieldKeyReleased

    private void vGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vGoButtonActionPerformed
        
            if(vNoRadioButton.isSelected()) {
            if(Integer.parseInt(vMoreQuestions.getText()) == 0 && hashKeys != null ) {
                saveDefValue();
                String random = generateFinalTestWithSelectedNO();
                
                if(vDocTextArea.getText().equals( random ))
                    vDocTextArea.setText(FAIL);
                else
                    vDocTextArea.setText("\n\n"+ random );
            }
        } 
        else if (vYesRadioButton.isSelected()) {
            if( hashKeys != null ) {
                saveDefValue();
                String random = generateFinalTestWithSelectedYES();
                
                if(vDocTextArea.getText().equals( random ))
                    vDocTextArea.setText(FAIL);
                else
                    vDocTextArea.setText("\n\n"+ random);
            }
            
        }
        
    }//GEN-LAST:event_vGoButtonActionPerformed

    private void vSaveDocButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vSaveDocButtonActionPerformed
        //create word docx
        String textArea = vDocTextArea.getText();
        
        if(defVal != null && textArea != null && !textArea.equals("") && !textArea.equals(FAIL)) {
           WriteReadFromWordFile wr = new WriteReadFromWordFile();
           WriteReadFromSer wrser = new WriteReadFromSer();
           
           String dirForSaving = chooseDirForSaving(defVal.getDirectForSaving());
           
           if(dirForSaving == null) {
               return;
           }
           
           defVal.setDirectForSaving(dirForSaving);
           
           
//           ArrayList<String> a = new ArrayList<>();
//           a.add(textArea);
//           a.add(textArea);
           
//           dirForSaving += File.separator + "test_"+defVal.getIdForSaved()+".docx";
           String dirForSaving1 = dirForSaving + File.separator + "test_"+defVal.getIdForSaved()+".docx";
           
           defVal.setIdForSavedPlusPlus();
           try{
               wrser.write(defVal);
           }catch(IOException e){
               e.printStackTrace();
           }
//           wr.newDocx(dirForSaving, a);
           wr.newDocx(dirForSaving1, textArea);
           
           
        }
        
    }//GEN-LAST:event_vSaveDocButtonActionPerformed

    private void vSaveOdtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vSaveOdtButtonActionPerformed
        ////////////////////////////////// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        String textArea = vDocTextArea.getText();
        
        if(defVal != null && textArea != null && !textArea.equals("") && !textArea.equals(FAIL)) {
           
           WriteFromOdtFiles odtw = new WriteFromOdtFiles();
           
           WriteReadFromSer wrser = new WriteReadFromSer();
           
           String dirForSaving = chooseDirForSaving(defVal.getDirectForSaving());
           
           if(dirForSaving == null) {
               return;
           }
           
           defVal.setDirectForSaving(dirForSaving);
           
           defVal.setIdForSavedPlusPlus();
           try{
               wrser.write(defVal);
           }catch(IOException e){
               e.printStackTrace();
           }
           
           String dirForSaving2 = dirForSaving + File.separator + "test_"+defVal.getIdForSaved()+".odt";
           odtw.newOdt(dirForSaving2, textArea);
        }

    }//GEN-LAST:event_vSaveOdtButtonActionPerformed

    private void vPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vPrintButtonActionPerformed
        
        String textArea = vDocTextArea.getText();
        if(defVal != null && textArea != null && !textArea.equals("") && !textArea.equals(FAIL)) {

            String printData = textArea;
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPrintable(new OutputPrinter(printData));
            boolean doPrint = job.printDialog();
            if (doPrint)
            {
                try
                {
                    job.print();
                }
                catch (PrinterException e)
                {
                    e.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_vPrintButtonActionPerformed
    private void checkAllNum(){
        try{
                
            if(vNumAllTextField.getText() == null || Integer.parseInt(vNumAllTextField.getText())<0 ) {
                vNumAllTextField.setText(""+0);
            } else if ( Integer.parseInt(vNumAllTextField.getText())> allNumbersOfQuestions ) {
                vNumAllTextField.setText(""+ allNumbersOfQuestions);
            }
        } catch(Exception e) {
            vNumAllTextField.setText(""+0);
        } finally {
            if( vNoRadioButton.isSelected() ) {
                changeMoreQuestions();
            } else if( vYesRadioButton.isSelected() ) {
                vMoreQuestions.setText(""+0);
                vMoreQuestions.setForeground(Color.black);
            }
        }
    }
    
    
    private String chooseDirForSaving(String defDirectory){
        
        
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(defDirectory));
        chooser.setDialogTitle("Choose Dir :");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile().toString();
        }
        
        return null;
    }
    
    private String generateFinalTestWithSelectedNO(){
        StringBuffer sb = null;
        if(hashKeys != null && tests != null) {
            
            TableModel model = vTableForCategories.getModel();
            int column = 2;
            sb = new StringBuffer(Integer.parseInt(vNumAllTextField.getText()));
            int numQuestion = 1;
            
            
            for(int row = 0 ; row < vTableForCategories.getRowCount() ; row++ ) {
                if((int)model.getValueAt(row, 2) != 0) {
                    List<String> questions = tests.get((String)model.getValueAt(row, 0));
                
                    int[] choice = MyRandom.generateRandomQuestion(questions.size(), (int)model.getValueAt(row, 2));

                    for(int index = 0 ; index < choice.length ; ++index) {
                        sb.append("" + numQuestion + ". " + questions.get(choice[index]) + "\n");
                        ++numQuestion;
                    }
                }
            }
            
            
        }
        return sb.toString();
    }
    private String generateFinalTestWithSelectedYES(){
        
        StringBuffer sb = null;
        
        if(hashKeys != null && tests != null) {
            
            List<String> allQuestions = new LinkedList<>();
            for(int i = 0 ; i < tests.size() ; i++) {
                List<String> l = tests.get(hashKeys.get(i));
                
                for(int j = 0 ; j < l.size() ; j++) {
                    allQuestions.add(l.get(j));
                }
                
            }
            int allNum = Integer.parseInt(vNumAllTextField.getText());
            
            sb = new StringBuffer(allNum);
            int numQuestion = 1;
            
            int[] choice = MyRandom.generateRandomQuestion(allQuestions.size(), allNum);
            
            for(int i = 0 ; i < choice.length ;i++ ){
                sb.append("" + numQuestion + ". " + allQuestions.get(choice[i]) + "\n");
                ++numQuestion;
            }
            
        }
        return sb.toString();
    }
    
    @Override
    public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel)e.getSource();
        
        Object data = model.getValueAt(row, column);
        
        if(data == null || Integer.parseInt(data.toString()) < 0 || 
                Integer.parseInt(model.getValueAt(row, column - 1 ).toString()) 
                < Integer.parseInt(data.toString()) ) {
            
            model.setValueAt(0, row, column);
        }
        
        changeMoreQuestions();
        
    }
    
    private int calcolateRestNumQuestionsFromTable(){
        TableModel model = vTableForCategories.getModel();
        int column = 2;
        int count = 0;
        
        for(int row = 0 ; row < vTableForCategories.getRowCount() ; row ++) {
            count += (int) model.getValueAt(row, column);
        }
        return count;
    }
    
    private void updateFiels() {
        readQuestionsFiles();
        redDefVal();
        
        allNumbersOfQuestions = 0;
        
        this.setBackground(Color.BLUE);
        this.setTitle("random");
        
        if(defVal != null) {
            vNumAllTextField.setText(""+defVal.getAllNumQuestions());
            
            if(defVal.isRandomChoiseFromCategories()) {
                vYesRadioButton.doClick();
            } else {
                vNoRadioButton.doClick();
            }
        
            if(hashKeys != null && tests != null) {

                DefaultTableModel model = (DefaultTableModel) vTableForCategories.getModel();

                for(int index = 0 ; index < hashKeys.size() ; ++index) {
                    model.addRow(new Object[]{hashKeys.get(index) ,
                        tests.get(hashKeys.get(index)).size(), defVal.getCategoriesSelectedNum().get(hashKeys.get(index)) });
                    allNumbersOfQuestions += tests.get(hashKeys.get(index)).size();
                }
            }
        
//        vDocTextArea.setText(text);
        }
        if( vNoRadioButton.isSelected() ) {
            changeMoreQuestions();
        } else if( vYesRadioButton.isSelected() ) {
            vMoreQuestions.setText(""+0);
            vMoreQuestions.setForeground(Color.black);
        }
        
        vDocTextArea.setEditable(false);
        vDocTextArea.setLineWrap(true);
        vDocTextArea.setWrapStyleWord(true);
        
    }
    
    private void changeMoreQuestions() {
        int c = Integer.parseInt(vNumAllTextField.getText()) - calcolateRestNumQuestionsFromTable();
        if(c >= 0) {
            vMoreQuestions.setText(""+ c );
            vMoreQuestions.setForeground(Color.black);
        } else {
            vMoreQuestions.setText(""+ c );
            vMoreQuestions.setForeground(Color.red);
        }
        
        
    }
        
    private void readQuestionsFiles() {
        
        File direc = new File(Q_DIR);
        direc.mkdirs();
        File []arrFiles = direc.listFiles();
        
        hashKeys = new ArrayList<>();
        tests = new HashMap<>();
        
        for(int index = 0 ; index < arrFiles.length ; ++index) {
            
            if(arrFiles[index].isFile()){
                if(checkFile(arrFiles[index].getPath())) {
                    
                    ThreadForReadWordFile th = new ThreadForReadWordFile(arrFiles[index].getPath());
                    th.run();

                    if(th.getList() != null) {
                        hashKeys.add(arrFiles[index].getName());
                        tests.put(arrFiles[index].getName(), th.getList());
                    }
                }
            }
        }
    }
    
    private void redDefVal(){
        defVal = new DefaultValues();
        WriteReadFromSer wr = new WriteReadFromSer();
        
        
        if( wr.isEmpty() ) {
            defVal.setRandomChoiseFromCategories(false);
            defVal.setAllNumQuestions(30);
            defVal.setDirectForSaving("saved_word_files");
            
            
            if(hashKeys != null) {
                HashMap<String,Integer> categoriesSelectedNum = new HashMap<>();
                if(hashKeys.size() == 0) {
                	System.exit(ABORT);
                }
                int n = defVal.getAllNumQuestions()/hashKeys.size();
                
                for(int i = hashKeys.size()-1 ; i >= 0; i--) {
                    
                    categoriesSelectedNum.put(hashKeys.get(i),(n > tests.get(hashKeys.get(i)).size())
                            ? tests.get(hashKeys.get(i)).size() : n );
                    
                }
                defVal.setCategoriesSelectedNum(categoriesSelectedNum);
            } else {
                defVal.setCategoriesSelectedNum(null);
            }
            try{
                wr.write(defVal);
            }catch(IOException e ){
                e.printStackTrace();
            }
            
            
        } else {
            try{
                defVal = wr.read();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
            
        }
        
    }
    
    private void saveDefValue(){
        if(defVal != null) {
            if(vYesRadioButton.isSelected()) {
                defVal.setRandomChoiseFromCategories(true);
            } else {
                defVal.setRandomChoiseFromCategories(false);
            }
            defVal.setAllNumQuestions(Integer.parseInt(vNumAllTextField.getText()));

            HashMap<String,Integer> categoriesSelectedNum = new HashMap<>();

            TableModel model = vTableForCategories.getModel();
            for(int row = 0 ; row < model.getRowCount() ; row++) {
                categoriesSelectedNum.put((String)model.getValueAt(row, 0) ,(int)model.getValueAt(row, 2) );
            }
            defVal.setCategoriesSelectedNum(categoriesSelectedNum);

            WriteReadFromSer wr = new WriteReadFromSer();
            try {
                
                wr.write(defVal);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
    }
    
    
    private boolean checkFile(String fileName) {
        String extension = "";
        
        int i = fileName.lastIndexOf('.');
        int p = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));

        if (i > p) {
            extension = fileName.substring(i+1);
        }
        
        if(extension.equals("doc") || extension.equals("docx")) {
            return true;
        }
        return false;
    }
    
    
    
    
    
   
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel q;
    private javax.swing.JLabel qMoreQuestions;
    private javax.swing.JLabel qTotalQuestions;
    private javax.swing.JLabel qYouHave;
    private javax.swing.JTextArea vDocTextArea;
    private javax.swing.JButton vGoButton;
    private javax.swing.JLabel vMoreQuestions;
    private javax.swing.JRadioButton vNoRadioButton;
    private javax.swing.JTextField vNumAllTextField;
    private javax.swing.JButton vPrintButton;
    private javax.swing.JButton vSaveDocButton;
    private javax.swing.JButton vSaveOdtButton;
    private javax.swing.JTable vTableForCategories;
    private javax.swing.JRadioButton vYesRadioButton;
    private javax.swing.JLabel vqLableNameDev;
    // End of variables declaration//GEN-END:variables
}

    
class TableListener implements TableModelListener {
    
    private JTable table;
    
    public TableListener(JTable table ){
        this.table = table;
        this.table.getModel().addTableModelListener(this);;
    }

    public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel)e.getSource();
        String columnName = model.getColumnName(column);
        Object data = model.getValueAt(row, column);
        
    }
}